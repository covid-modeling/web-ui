import {input} from '@covid-modeling/api'
import {addDays, toYYYYMMDD} from '../lib/dateFunctions'
import {
  getInterventionsEnd,
  getNextInterventionPeriodStart,
  initializeSimulationState,
  NewSimulationState
} from '../lib/new-simulation-state'
import {InterventionMap, Interventions} from '../lib/simulation-types'

describe('new-simulation-state', () => {
  describe('initializeSimulationState', () => {
    it('should initialize state with empty interventions', () => {
      const state = initializeSimulationState(
        createMockRegions(),
        createMockInterventions()
      )
      expect(state).toEqual({
        interventionPeriods: [],
        label: createMockLabel(),
        ...createMockRegions()
      })
    })

    it('should initialize state with two interventions of increasing intensity', () => {
      const state = initializeSimulationState(
        createMockRegions(),
        createMockInterventions({
          GathRestrict10: {
            dateEnacted: '2020-03-13'
          } as any,
          StateCurfew: {
            dateEnacted: '2020-03-23'
          } as any
        })
      )
      expect(state).toEqual({
        label: createMockLabel(),
        ...createMockRegions(),
        interventionPeriods: [
          {
            startDate: '2020-03-13',
            reductionPopulationContact: 33,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: input.Intensity.Aggressive,
            caseIsolation: input.Intensity.Aggressive,
            socialDistancing: input.Intensity.Mild
          },
          {
            startDate: '2020-03-23',
            reductionPopulationContact: 48,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: input.Intensity.Aggressive,
            caseIsolation: input.Intensity.Aggressive,
            socialDistancing: input.Intensity.Moderate
          }
        ]
      })
    })

    it('should initialize state with two interventions second merges with first', () => {
      const state = initializeSimulationState(
        createMockRegions(),
        createMockInterventions({
          GathRestrict10: {
            dateEnacted: '2020-03-13'
          } as any,
          SchoolClose: {
            dateEnacted: '2020-03-23'
          } as any
        })
      )
      expect(state).toEqual({
        label: createMockLabel(),
        ...createMockRegions(),
        interventionPeriods: [
          {
            startDate: '2020-03-13',
            reductionPopulationContact: 33,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: input.Intensity.Aggressive,
            caseIsolation: input.Intensity.Aggressive,
            socialDistancing: input.Intensity.Mild
          },
          {
            startDate: '2020-03-23',
            reductionPopulationContact: 44,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: input.Intensity.Aggressive,
            caseIsolation: input.Intensity.Aggressive,
            socialDistancing: input.Intensity.Mild,
            schoolClosure: input.Intensity.Aggressive
          }
        ]
      })
    })

    it('should initialize state with two interventions on the same date, second overriding the first', () => {
      // multiple periods enacted on same day, just use the most intense.
      const state = initializeSimulationState(
        createMockRegions(),
        createMockInterventions({
          GathRestrict10: {
            dateEnacted: '2020-03-13'
          } as any,
          StateCurfew: {
            dateEnacted: '2020-03-13'
          } as any
        })
      )
      expect(state).toEqual({
        label: createMockLabel(),
        ...createMockRegions(),
        interventionPeriods: [
          {
            startDate: '2020-03-13',
            reductionPopulationContact: 48,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: input.Intensity.Aggressive,
            caseIsolation: input.Intensity.Aggressive,
            socialDistancing: input.Intensity.Moderate
          }
        ]
      })
    })

    it('should initialize state with two interventions on the different dates, first overriding the second', () => {
      // GathRestrict10 and GathRestrict10 are the same intensity, so our periods have not changed. Just use
      // the first period.
      const state = initializeSimulationState(
        createMockRegions(),
        createMockInterventions({
          GathRestrict10: {
            dateEnacted: '2020-03-13'
          } as any
        })
      )
      expect(state).toEqual({
        label: createMockLabel(),
        ...createMockRegions(),
        interventionPeriods: [
          {
            startDate: '2020-03-13',
            reductionPopulationContact: 33,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: input.Intensity.Aggressive,
            caseIsolation: input.Intensity.Aggressive,
            socialDistancing: input.Intensity.Mild
          }
        ]
      })
    })

    it('should handle Alabama interventions', () => {
      const state = initializeSimulationState(
        createMockRegions(),
        createMockInterventions(createAlabamaInterventions())
      )
      expect(state).toEqual({
        label: createMockLabel(),
        ...createMockRegions(),
        interventionPeriods: [
          {
            startDate: '2020-03-18',
            reductionPopulationContact: 38,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: 'aggressive',
            caseIsolation: 'aggressive',
            schoolClosure: 'aggressive'
          },
          {
            startDate: '2020-03-20',
            reductionPopulationContact: 44,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: 'aggressive',
            caseIsolation: 'aggressive',
            schoolClosure: 'aggressive',
            socialDistancing: 'mild'
          },
          {
            startDate: '2020-04-04',
            reductionPopulationContact: 57,
            isAutoGenerated: true,
            voluntaryHomeQuarantine: 'aggressive',
            caseIsolation: 'aggressive',
            schoolClosure: 'aggressive',
            socialDistancing: 'moderate'
          }
        ]
      })
    })
  })

  describe('getNextInterventionPeriodStart', () => {
    it('should get start date when there are no interventions', () => {
      const today = toYYYYMMDD()
      expect(getNextInterventionPeriodStart([])).toBe(today)
    })

    it('should get start date when there are only pre-existing interventions', () => {
      const today = toYYYYMMDD()
      expect(
        getNextInterventionPeriodStart([
          {startDate: addDays(today, -7)} as any,
          {startDate: addDays(today, -2)} as any
        ])
      ).toBe(today)
    })

    it('should get start date when there are new interventions', () => {
      const today = toYYYYMMDD()
      expect(
        getNextInterventionPeriodStart([
          {startDate: addDays(today, 7)} as any,
          {startDate: addDays(today, 20)} as any
        ])
      ).toBe(addDays(today, 21))
    })
  })

  describe('getInterventionsEnd', () => {
    it('should get end date when there are no interventions', () => {
      const today = toYYYYMMDD()
      expect(getInterventionsEnd([])).toBe(addDays(today, 90))
    })

    it('should get end date when there are only pre-existing interventions', () => {
      const today = toYYYYMMDD()
      expect(
        getInterventionsEnd([
          {startDate: addDays(today, -7)} as any,
          {startDate: addDays(today, -2)} as any
        ])
      ).toBe(addDays(today, 90))
    })

    it('should get start date when there are new interventions', () => {
      const today = toYYYYMMDD()
      expect(
        getInterventionsEnd([
          {startDate: addDays(today, 7)} as any,
          {startDate: addDays(today, 20)} as any
        ])
      ).toBe(addDays(today, 110))
    })
  })

  function createMockRegions(
    regionID = 'US',
    subregionID = 'US-AL'
  ): Pick<NewSimulationState, 'region' | 'subregion'> {
    return {
      region: {id: regionID} as any,
      subregion: {id: subregionID} as any
    }
  }

  function createMockLabel() {
    return `Simulation created on ${toYYYYMMDD()}`
  }

  function createMockInterventions(
    interventions: Interventions = {} as any
  ): InterventionMap {
    return {
      US: {
        'US-AL': interventions
      }
    }
  }

  // Actual interventions that was causing an error
  function createAlabamaInterventions() {
    return {
      EmergDec: {
        dateIssued: '2020-03-13',
        dateEnacted: '2020-03-13',
        dateExpiry: '',
        dateEnded: '',
        notes: 'Public Health Emergency',
        source:
          'https://governor.alabama.gov/newsroom/2020/03/third-supplemental-state-of-emergency-coronavirus-covid-19/'
      },
      SchoolClose: {
        dateIssued: '2020-03-14',
        dateEnacted: '2020-03-18',
        dateExpiry: '',
        dateEnded: '',
        notes:
          'in effect 20200318. 20200319 issuance also closed all public/private schools (20200314 is public school)',
        source: 'http://alabamapublichealth.gov/legal/assets/420-4-1.13-er.pdf'
      },
      GathRestrict25: {
        dateIssued: '2020-03-19',
        dateEnacted: '2020-03-20',
        dateExpiry: '',
        dateEnded: '',
        notes: 'Announced 20200319, but signed into law 20200320',
        source: 'http://alabamapublichealth.gov/legal/assets/420-4-1.13-er.pdf'
      },
      GathRestrict10: {
        dateIssued: '2020-03-19',
        dateEnacted: '2020-03-20',
        dateExpiry: '',
        dateEnded: '',
        notes: 'Announced 20200319, but signed into law 20200320',
        source: 'http://alabamapublichealth.gov/legal/assets/420-4-1.13-er.pdf'
      },
      OtherBusinessClose: {
        dateIssued: '2020-03-27',
        dateEnacted: '2020-03-28',
        dateExpiry: '2020-04-17',
        dateEnded: '',
        notes:
          'Non-essential business categories closed included entertainment venues, retail shops, personal care services, and athletic faciltiies. Not considered full NEBusinessClose yet due to only listing of additional types of businsess to close.',
        source: 'https://www.alabamapublichealth.gov/news/2020/03/27.html'
      },
      RestaurantRestrict: {
        dateIssued: '2020-03-19',
        dateEnacted: '2020-03-20',
        dateExpiry: '',
        dateEnded: '',
        notes: 'Limited operations required: restaurants, bars, breweries',
        source: 'http://alabamapublichealth.gov/legal/assets/420-4-1.13-er.pdf'
      },
      StayAtHome: {
        dateIssued: '2020-04-03',
        dateEnacted: '2020-04-04',
        dateExpiry: '2020-04-30',
        dateEnded: '',
        notes: 'Goes into effect at 5 pm on 20200403',
        source:
          'http://www.alabamapublichealth.gov/legal/assets/soe-covid19-stamped-040320.pdf'
      }
    }
  }
})
